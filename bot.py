from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import logging
from aiogram import Bot, Dispatcher, types
import os
import telebot
from telebot import TeleBot, types
from db import update_item
import db
import time
import gspread
from google.oauth2.service_account import Credentials

# --- Health check server ---
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

def run_health_server():
    server = HTTPServer(("0.0.0.0", 8080), HealthHandler)
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()

# --- Google Sheets connect ---
SERVICE_ACCOUNT_FILE = 'credentials.json'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets',
          'https://www.googleapis.com/auth/drive']

credentials = Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    scopes=SCOPES
)
gc = gspread.authorize(credentials)
sh = gc.open_by_url('https://docs.google.com/spreadsheets/d/1_5g3h6DnyyiTtvMcyc6y5wFsTe8P4WzbH3XZdbqRRwk/edit#gid=0')
questions_ws = sh.worksheet('–í–æ–ø—Ä–æ—Å—ã')
scores_ws = sh.worksheet('–ë–∞–ª–ª—ã')
styles_ws = sh.worksheet('–°—Ç–∏–ª–∏')

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logging.error("‚ùå TELEGRAM_TOKEN is not set in environment")
    exit(1)
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = TeleBot(TOKEN)

# --- Neurophoto test state ---
from collections import defaultdict
TEST_USER_STATE = {}

def get_test_questions():
    rows = questions_ws.get_all_records()
    questions = []
    for row in rows:
        questions.append({
            'number': row['‚Ññ'],
            'text': row['–í–æ–ø—Ä–æ—Å'],
            'type': row['–¢–∏–ø'],
            'options': [opt.strip() for opt in row['–í–∞—Ä–∏–∞–Ω—Ç—ã'].split(';')],
        })
    return questions

def get_score_for_answer(q_num, answer):
    rows = scores_ws.get_all_records()
    for row in rows:
        if str(row['‚Ññ']) == str(q_num) and str(row['–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞']).strip() == answer.strip():
            return [
                int(row['–ú–∏–Ω–∏–º–∞–ª–∏–∑–º']),
                int(row['–ö–∏–±–µ—Ä–ø–∞–Ω–∫']),
                int(row['–°—é—Ä—Ä–µ–∞–ª–∏–∑–º']),
                int(row['–†–µ—Ç—Ä–æ']),
                int(row['–ù–µ–æ–Ω-–ø–æ–ø']),
                int(row['–ê–∫–≤–∞—Ä–µ–ª—å']),
                int(row['–≠–∫–æ']),
                int(row['Fashion']),
            ]
    return [0]*8

def get_style_by_scores(scores_sum):
    idx = scores_sum.index(max(scores_sum))
    styles = styles_ws.get_all_records()
    style = styles[idx]
    return style['–°—Ç–∏–ª—å'], style['–û–ø–∏—Å–∞–Ω–∏–µ'], style['–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'], style.get('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞', '')

def send_test_question(chat_id, q_idx):
    questions = get_test_questions()
    if q_idx >= len(questions):
        return
    q = questions[q_idx]
    kb = types.InlineKeyboardMarkup()
    for idx, opt in enumerate(q['options']):
        kb.add(types.InlineKeyboardButton(opt, callback_data=f"nstyle:{q_idx}:{idx}"))
    bot.send_message(chat_id, f"{q_idx+1}) {q['text']}", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data == "cat:–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
def neuro_test_start(call):
    user_id = call.message.chat.id

# ‚Äî‚Äî‚Äî –í–°–¢–£–ü–ò–¢–ï–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
    intro_text = (
        "üß† <b>–¢–µ—Å—Ç: –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?</b>\n\n"
        "–¢–µ–±—è –∂–¥—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤. "
        "–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ ‚Äî –≤ —Ñ–∏–Ω–∞–ª–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Ç–∏–ª—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç —Ç–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å!\n\n"
        "–ì–æ—Ç–æ–≤–∞? –¢–æ–≥–¥–∞ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ üëá"
    )
    bot.send_message(user_id, intro_text, parse_mode="HTML")

    TEST_USER_STATE[user_id] = {
        'answers': [],
        'current': 0,
        'scores': [0]*8
    }
    send_test_question(user_id, 0)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith("nstyle:"))
def neuro_test_step(call):
    user_id = call.message.chat.id
    _, q_idx, opt_idx = call.data.split(":", 2)
    q_idx = int(q_idx)
    opt_idx = int(opt_idx)
    questions = get_test_questions()
    answer = questions[q_idx]['options'][opt_idx]
    state = TEST_USER_STATE.setdefault(user_id, {'answers': [], 'current': 0, 'scores':[0]*8})
    state['answers'].append(answer)
    scores = get_score_for_answer(q_idx+1, answer)

    state['scores'] = [s+int(v) for s,v in zip(state['scores'], scores)]
    next_q = q_idx + 1
    questions = get_test_questions()
    if next_q < len(questions):
        state['current'] = next_q
        send_test_question(user_id, next_q)
    else:
        style_name, style_desc, style_img, style_order = get_style_by_scores(state['scores'])
        msg = f"üåü –í–∞—à —Å—Ç–∏–ª—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ: <b>{style_name}</b>\n\n{style_desc}"
        if style_img:
            bot.send_photo(user_id, style_img, caption=msg, parse_mode='HTML')
        else:
            bot.send_message(user_id, msg, parse_mode='HTML')
        if style_order:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ", url=style_order))
            bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ? –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–∫—É üëá", reply_markup=kb)
        TEST_USER_STATE.pop(user_id, None)
    bot.answer_callback_query(call.id)

# --- –ú–µ–Ω—é –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏/–ø—É–Ω–∫—Ç–∞–º–∏ ---
user_states = {}

@bot.message_handler(commands=['start'])
def start(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìã –ú–µ–Ω—é"))
    bot.send_message(msg.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø NeuroBot - –ø–æ–º–æ—â–Ω–∏–∫ –û–ª—å–≥–∏ –ú–∏—à–∏–Ω–æ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ú–µ–Ω—é.",
        reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ–Ω—é")
def show_categories(msg):
    cats = db.list_categories()
    if not cats:
        return bot.reply_to(msg, "–ú–µ–Ω—é –ø—É—Å—Ç–æ. –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ /add_item.")
    kb = types.InlineKeyboardMarkup()
    for cat in cats:
        kb.add(types.InlineKeyboardButton(cat, callback_data=f"cat:{cat}"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data.startswith("cat:") and c.data != "cat:–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
def show_items(call):
    cat = call.data.split(":",1)[1]
    items = db.list_items(cat)
    if not items:
        bot.answer_callback_query(call.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤.")
        return
    kb = types.InlineKeyboardMarkup()
    for item_id, name, _, _ in items:
        kb.add(types.InlineKeyboardButton(name, callback_data=f"item:{item_id}"))
    # ‚Äî‚Äî‚Äî –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å:
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    bot.send_message(call.message.chat.id,
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{cat}¬ª: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:",
        reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data == "back_to_menu")
def back_to_main_menu(call):
    cats = db.list_categories()
    if not cats:
        bot.send_message(call.message.chat.id, "–ú–µ–Ω—é –ø—É—Å—Ç–æ. –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ /add_item.")
        return
    kb = types.InlineKeyboardMarkup()
    for cat in cats:
        kb.add(types.InlineKeyboardButton(cat, callback_data=f"cat:{cat}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(lambda c: c.data.startswith("item:"))
def handle_item(call):
    item_id = int(call.data.split(":",1)[1])
    rec = db.get_item(item_id)
    if not rec:
        return bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    name, kind, value = rec
    if kind=="file":
        bot.send_document(call.message.chat.id, value, caption=name)
    else:
        bot.send_message(call.message.chat.id, f"{name}\n\n{value}")
    bot.answer_callback_query(call.id)

# --- –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –±—ã–ª–∏) ---
@bot.message_handler(commands=['add_item'])
def cmd_add_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    user_states[msg.chat.id] = {'step':'category'}
    bot.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é* –ø—É–Ω–∫—Ç–∞:", parse_mode='Markdown')

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='category')
def state_category(msg):
    user_states[msg.chat.id]['category'] = msg.text
    user_states[msg.chat.id]['step'] = 'name'
    bot.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –ø—É–Ω–∫—Ç–∞:", parse_mode='Markdown')

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='name')
def state_name(msg):
    user_states[msg.chat.id]['name'] = msg.text
    user_states[msg.chat.id]['step'] = 'kind'
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("file", "url")
    bot.reply_to(msg, "–≠—Ç–æ –±—É–¥–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ `file` –∏–ª–∏ `url`.", reply_markup=kb)

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='kind')
def state_kind(msg):
    kind = msg.text.lower()
    if kind not in ('file','url'):
        return bot.reply_to(msg, "–ù—É–∂–Ω–æ `file` –∏–ª–∏ `url`.", parse_mode='Markdown')
    user_states[msg.chat.id]['kind'] = kind
    user_states[msg.chat.id]['step'] = 'value'
    bot.reply_to(msg, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ) –∏–ª–∏ —Å—Å—ã–ª–∫—É:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='value', content_types=['text','document','video'])
def state_value(msg):
    st = user_states.pop(msg.chat.id)
    cat, name, kind = st['category'], st['name'], st['kind']
    if kind=='file':
        fid = msg.document.file_id if msg.document else msg.video.file_id
        db.add_item(cat, name, kind, fid)
    else:
        db.add_item(cat, name, kind, msg.text)
    bot.reply_to(msg, f"‚úÖ –ü—É–Ω–∫—Ç *¬´{name}¬ª* –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *¬´{cat}¬ª* –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='Markdown')

@bot.message_handler(commands=['del_item'])
def cmd_del_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    parts = msg.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del_item <ID>")
    db.delete_item(int(parts[1]))
    bot.reply_to(msg, "üóë –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω.")

@bot.message_handler(commands=['edit_item'])
def cmd_edit_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_item <ID>")
    item_id = int(parts[1])
    rec = db.get_item(item_id)
    if not rec:
        return bot.reply_to(msg, "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    name, kind, value = rec
    user_states[msg.chat.id] = {
        'step': 'edit_name',
        'id': item_id,
        'old_name': name,
        'kind': kind,
        'old_value': value
    }
    bot.reply_to(
        msg,
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ #{item_id}:\n"
        f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å.",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'edit_name')
def state_edit_name(msg):
    st = user_states[msg.chat.id]
    if msg.text.lower() != 'skip':
        st['new_name'] = msg.text
    else:
        st['new_name'] = st['old_name']
    st['step'] = 'edit_value'
    if st['kind'] == 'file':
        prompt = "–ü—Ä–∏—à–ª–∏—Ç–µ *–Ω–æ–≤—ã–π —Ñ–∞–π–ª* (–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ) –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å."
    else:
        prompt = "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É* –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å."
    bot.reply_to(msg, prompt, parse_mode='Markdown')

@bot.message_handler(
    func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'edit_value',
    content_types=['text', 'document', 'video']
)
def state_edit_value(msg):
    st = user_states.pop(msg.chat.id)
    item_id = st['id']
    new_name = st['new_name']
    kind = st['kind']
    if kind == 'file':
        if msg.content_type in ['document', 'video']:
            new_value = (msg.document or msg.video).file_id
        else:
            new_value = st['old_value']
    else:
        if msg.text.lower() != 'skip':
            new_value = msg.text
        else:
            new_value = st['old_value']
    update_item(item_id, name=new_name, value=new_value)
    bot.reply_to(msg, f"‚úÖ –ü—É–Ω–∫—Ç #{item_id} –æ–±–Ω–æ–≤–ª—ë–Ω:\n¬´{new_name}¬ª")

@bot.message_handler(commands=['list_items'])
def cmd_list_items(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –≤–∏–¥–µ—Ç—å.")
    items = db.list_all_items()
    if not items:
        return bot.reply_to(msg, "–ú–µ–Ω—é –ø—É—Å—Ç–æ.")
    lines = ["üìã –¢–µ–∫—É—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:"]
    for item_id, category, name, kind in items:
        lines.append(f"{item_id}. [{category}] {name} ({kind})")
    bot.reply_to(msg, "\n".join(lines))

@bot.message_handler(commands=['admin_help'])
def cmd_admin_help(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üìã\n\n"
        "/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é –±–æ—Ç–∞\n"
        "/add_item ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí file/url ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç)\n"
        "/del_item <ID> ‚Äî –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID\n"
        "/list_items ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å –∏—Ö ID, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Ç–∏–ø–æ–º\n"
        "/edit_item <ID> ‚Äî –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–Ω–∫—Ç–∞ –ø–æ ID\n"
        "/admin_help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    bot.reply_to(msg, help_text)

# --- –≠—Ö–æ –Ω–∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
@bot.message_handler(func=lambda m: True)
def echo_all(msg):
    bot.reply_to(msg, f"–ù–µ –ø–æ–Ω—è–ª: {msg.text}")

if __name__ == "__main__":
    bot.remove_webhook()
    logging.info("üóë Webhook removed, waiting 1s‚Ä¶")
    time.sleep(1)
    threading.Thread(target=run_health_server, daemon=True).start()
    logging.info("üîó Health server started on 0.0.0.0:8080")
    logging.info("üöÄ Bot is starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=60)
