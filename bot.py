import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–∑–¥–æ—Ä–æ–≤—å—è¬ª
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

# 2) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080
def start_health_server():
    server = HTTPServer(("0.0.0.0", 8080), HealthHandler)
    server.serve_forever()

# 3) –°—Ç–∞—Ä—Ç—É–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
threading.Thread(target=start_health_server, daemon=True).start()

import logging
from aiogram import Bot, Dispatcher, types
import os, logging
import telebot
from telebot import types
from db import update_item
import db
import time
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logging.error("‚ùå TELEGRAM_TOKEN is not set in environment")
    exit(1)

# (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)

# === –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===

# –ó–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
QUIZ_QUESTIONS = [
    {
        "question": "1) –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ?",
        "options": ["–§–æ—Ç–æ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–ö—É—Ä—Å –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "–ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"],
        "correct": 0
    },
    {
        "question": "2) –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –Ω–∞—à –±–æ—Ç?",
        "options": ["–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤", "–ò–≥—Ä—ã"],
        "correct": 1
    },
    # –î–æ–±–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É
]

def send_quiz_question(chat_id, index):
    q = QUIZ_QUESTIONS[index]
    kb = types.InlineKeyboardMarkup()
    for i, opt in enumerate(q["options"]):
        kb.add(types.InlineKeyboardButton(opt, callback_data=f"quiz:{index}:{i}"))
    bot.send_message(chat_id, q["question"], reply_markup=kb)

# === –ù–ê–ß–ê–õ–û: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ===
# –§–æ—Ä–º–∞—Ç: (min_score, max_score, —Ç–µ–∫—Å—Ç_–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏)
SCORE_INTERPRETATIONS = [
    (0, 1, "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–æ –±–∞–ª–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–∞–π–¥–∞–º –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑."),
    (2, 2, "üôÇ –ù–µ–ø–ª–æ—Ö–æ! –í—ã –æ—Å–≤–æ–∏–ª–∏ –±–∞–∑–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è, –Ω–æ –º–æ–∂–Ω–æ —á—É—Ç—å –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è."),
    (3, 3, "üòä –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–º–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ."),
    (4, 5, "üèÜ –í–ø–µ—á–∞—Ç–ª—è–µ—Ç! –í—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏ —Å–º–µ–ª–æ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏."),
    # –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ; –≤–µ—Ä—Ö–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å >len(QUESTIONS)
]
# === –ö–û–ù–ï–¶: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ===

# === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ===

TOKEN    = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö FSM-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
user_states = {}

# --- /start ---
@bot.message_handler(commands=['start'])
def start(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìã –ú–µ–Ω—é"))
    bot.send_message(msg.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø NeuroBot - –ø–æ–º–æ—â–Ω–∏–∫ –û–ª—å–≥–∏ –ú–∏—à–∏–Ω–æ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ú–µ–Ω—é.",
        reply_markup=kb)

# --- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ–Ω—é")
def show_categories(msg):
    cats = db.list_categories()
    if not cats:
        return bot.reply_to(msg, "–ú–µ–Ω—é –ø—É—Å—Ç–æ. –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ /add_item.")
    kb = types.InlineKeyboardMarkup()
    for cat in cats:
        kb.add(types.InlineKeyboardButton(cat, callback_data=f"cat:{cat}"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

# --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—É–Ω–∫—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@bot.callback_query_handler(lambda c: c.data.startswith("cat:"))
def show_items(call):
    cat = call.data.split(":",1)[1]
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if cat == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        user_states[call.message.chat.id] = {'step':'quiz','index':0,'score':0}
        send_quiz_question(call.message.chat.id, 0)
        bot.answer_callback_query(call.id)
        return
    items = db.list_items(cat)
    if not items:
        bot.answer_callback_query(call.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤.")
        return
    kb = types.InlineKeyboardMarkup()
    for item_id, name, _, _ in items:
        kb.add(types.InlineKeyboardButton(name, callback_data=f"item:{item_id}"))
    bot.send_message(call.message.chat.id,
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{cat}¬ª: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:",
        reply_markup=kb)
    bot.answer_callback_query(call.id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ ---
@bot.callback_query_handler(lambda c: c.data.startswith("item:"))
def handle_item(call):
    item_id = int(call.data.split(":",1)[1])
    rec = db.get_item(item_id)
    if not rec:
        return bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
    name, kind, value = rec
    if kind=="file":
        bot.send_document(call.message.chat.id, value, caption=name)
    else:
        bot.send_message(call.message.chat.id, f"{name}\n\n{value}")
    bot.answer_callback_query(call.id)

# --- –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ---
user_states = {}

@bot.message_handler(commands=['add_item'])
def cmd_add_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    user_states[msg.chat.id] = {'step':'category'}
    bot.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é* –ø—É–Ω–∫—Ç–∞:", parse_mode='Markdown')

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='category')
def state_category(msg):
    user_states[msg.chat.id]['category'] = msg.text
    user_states[msg.chat.id]['step'] = 'name'
    bot.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –ø—É–Ω–∫—Ç–∞:", parse_mode='Markdown')

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='name')
def state_name(msg):
    user_states[msg.chat.id]['name'] = msg.text
    user_states[msg.chat.id]['step'] = 'kind'
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("file", "url")
    bot.reply_to(msg, "–≠—Ç–æ –±—É–¥–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞? –ù–∞–ø–∏—à–∏—Ç–µ `file` –∏–ª–∏ `url`.", reply_markup=kb)

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='kind')
def state_kind(msg):
    kind = msg.text.lower()
    if kind not in ('file','url'):
        return bot.reply_to(msg, "–ù—É–∂–Ω–æ `file` –∏–ª–∏ `url`.", parse_mode='Markdown')
    user_states[msg.chat.id]['kind'] = kind
    user_states[msg.chat.id]['step'] = 'value'
    bot.reply_to(msg, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ) –∏–ª–∏ —Å—Å—ã–ª–∫—É:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id,{}).get('step')=='value', content_types=['text','document','video'])
def state_value(msg):
    st = user_states.pop(msg.chat.id)
    cat, name, kind = st['category'], st['name'], st['kind']
    if kind=='file':
        fid = msg.document.file_id if msg.document else msg.video.file_id
        db.add_item(cat, name, kind, fid)
    else:
        db.add_item(cat, name, kind, msg.text)
    bot.reply_to(msg, f"‚úÖ –ü—É–Ω–∫—Ç *¬´{name}¬ª* –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *¬´{cat}¬ª* –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode='Markdown')

# --- –ê–¥–º–∏–Ω: —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç ---
@bot.message_handler(commands=['del_item'])
def cmd_del_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    parts = msg.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del_item <ID>")
    db.delete_item(int(parts[1]))
    bot.reply_to(msg, "üóë –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω.")

# --- –ê–¥–º–∏–Ω: –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ ---
@bot.message_handler(commands=['edit_item'])
def cmd_edit_item(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_item <ID>")
    item_id = int(parts[1])
    rec = db.get_item(item_id)
    if not rec:
        return bot.reply_to(msg, "‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    name, kind, value = rec
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[msg.chat.id] = {
        'step': 'edit_name',
        'id': item_id,
        'old_name': name,
        'kind': kind,
        'old_value': value
    }
    bot.reply_to(
        msg,
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ #{item_id}:\n"
        f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å.",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'edit_name')
def state_edit_name(msg):
    st = user_states[msg.chat.id]
    if msg.text.lower() != 'skip':
        st['new_name'] = msg.text
    else:
        st['new_name'] = st['old_name']
    st['step'] = 'edit_value'
    if st['kind'] == 'file':
        prompt = "–ü—Ä–∏—à–ª–∏—Ç–µ *–Ω–æ–≤—ã–π —Ñ–∞–π–ª* (–¥–æ–∫—É–º–µ–Ω—Ç/–≤–∏–¥–µ–æ) –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å."
    else:
        prompt = "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É* –∏–ª–∏ `skip`, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å."
    bot.reply_to(msg, prompt, parse_mode='Markdown')

@bot.message_handler(
    func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'edit_value',
    content_types=['text', 'document', 'video']
)
def state_edit_value(msg):
    st = user_states.pop(msg.chat.id)
    item_id = st['id']
    new_name = st['new_name']
    kind = st['kind']
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if kind == 'file':
        if msg.content_type in ['document', 'video']:
            new_value = (msg.document or msg.video).file_id
        else:
            new_value = st['old_value']
    else:  # url
        if msg.text.lower() != 'skip':
            new_value = msg.text
        else:
            new_value = st['old_value']
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    update_item(item_id, name=new_name, value=new_value)
    bot.reply_to(msg, f"‚úÖ –ü—É–Ω–∫—Ç #{item_id} –æ–±–Ω–æ–≤–ª—ë–Ω:\n¬´{new_name}¬ª")

# --- –ê–¥–º–∏–Ω: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é ---
@bot.message_handler(commands=['list_items'])
def cmd_list_items(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –≤–∏–¥–µ—Ç—å.")
    items = db.list_all_items()
    if not items:
        return bot.reply_to(msg, "–ú–µ–Ω—é –ø—É—Å—Ç–æ.")
    lines = ["üìã –¢–µ–∫—É—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é:"]
    for item_id, category, name, kind in items:
        lines.append(f"{item_id}. [{category}] {name} ({kind})")
    bot.reply_to(msg, "\n".join(lines))

# --- –ê–¥–º–∏–Ω: –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º ---
@bot.message_handler(commands=['admin_help'])
def cmd_admin_help(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üìã\n\n"
        "/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é –±–æ—Ç–∞\n"
        "/add_item ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí file/url ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç)\n"
        "/del_item <ID> ‚Äî –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID\n"
        "/list_items ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å –∏—Ö ID, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Ç–∏–ø–æ–º\n"
        "/edit_item <ID> ‚Äî –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–Ω–∫—Ç–∞ –ø–æ ID\n"
        "/quiz ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
        "/admin_help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    bot.reply_to(msg, help_text)

# --- –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
@bot.message_handler(commands=['quiz'])
def cmd_quiz(msg):
    user_states[msg.chat.id] = {'step':'quiz','index':0,'score':0}
    send_quiz_question(msg.chat.id, 0)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ---
@bot.callback_query_handler(func=lambda c: c.data.startswith("quiz:"))
def handle_quiz(call):
    data = call.data.split(":")
    q_index = int(data[1])
    choice = int(data[2])

    st = user_states.get(call.message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –∏ –Ω–∞ —Ç–æ–º –∂–µ –≤–æ–ø—Ä–æ—Å–µ
    if not st or st.get('step') != 'quiz' or st.get('index') != q_index:
        return bot.answer_callback_query(call.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if choice == QUIZ_QUESTIONS[q_index]['correct']:
        st['score'] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_index = q_index + 1
    total = len(QUIZ_QUESTIONS)
    if next_index < total:
        st['index'] = next_index
        send_quiz_question(call.message.chat.id, next_index)
    else:
        score = st['score']
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –ø–æ —à–∫–∞–ª–µ
        interpretation = None
        for min_s, max_s, text in SCORE_INTERPRETATIONS:
            if min_s <= score <= max_s:
                interpretation = text
                break
        if interpretation is None:
            interpretation = f"üéâ –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {total} –±–∞–ª–ª–æ–≤."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
        bot.send_message(
            call.message.chat.id,
            f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\n\n"
            f"{interpretation}"
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(call.message.chat.id, None)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª —É –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id)

# --- –≠—Ö–æ –Ω–∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
@bot.message_handler(func=lambda m: True)
def echo_all(msg):
    bot.reply_to(msg, f"–ù–µ –ø–æ–Ω—è–ª: {msg.text}")

if __name__ == "__main__":
    # 1. –û—Ç—Ä—É–±–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    bot.remove_webhook()
    logging.info("üóë Webhook removed, waiting 1s‚Ä¶")
    time.sleep(1)

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    threading.Thread(target=start_health_server, daemon=True).start()
    logging.info("üîó Health server started on 0.0.0.0:8080")

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–ø—Ä–æ—Å polling
    logging.info("üöÄ Bot is starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=60)
